// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pets": {
            "get": {
                "description": "Возвращает список всех питомцев",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Получить список питомцев",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Pet"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Добавляет нового питомца в список",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Добавить нового питомца",
                "parameters": [
                    {
                        "description": "Информация о питомце",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostPet"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Pet"
                        }
                    },
                    "400": {
                        "description": "Ошибка при обработке запроса",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pets/{id}": {
            "get": {
                "description": "Возвращает информацию о питомце по его идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Получить питомца по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Pet"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о питомце по его идентификатору",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Обновить питомца по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Обновленная информация о питомце",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdatePet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Pet"
                        }
                    },
                    "400": {
                        "description": "Ошибка при обработке запроса",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет питомца из списка по его идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Удалить питомца по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Питомец успешно удалён",
                        "schema": {
                            "$ref": "#/definitions/model.DeleteResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.DeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Pet": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "date_added": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/model.Type"
                }
            }
        },
        "model.PostPet": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/model.Type"
                }
            }
        },
        "model.Type": {
            "type": "string",
            "enum": [
                "cat",
                "dog"
            ],
            "x-enum-varnames": [
                "Cat",
                "Dog"
            ]
        },
        "model.UpdatePet": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Pet Store API",
	Description:      "pet microservice",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
